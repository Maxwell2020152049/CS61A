(define (split-at lst n)
  (define (split first lst n)
    (cond 
      ((null? lst)
       (cons first nil)
      )
      ((= n 0)
       (cons first lst)
      )
      (else
       (split (append first (cons (car lst) nil))
              (cdr lst)
              (- n 1)
       )
      )
    )
  )
  (split '() lst n)
)

; (define (compose-all funcs ans)
;     (define (compose funcs ans)
;         (cond ((null? funcs) ans)
;             (else (compose (cdr funcs) ((car funcs) ans)))
;         )
;     )
;     (compose funcs ans)
; )

; (define (square x) (* x x))
; (define (add-one x) (+ x 1))
; (define (double x) (* x 2))

(define (compose-all funcs)
    (lambda (x)
        (if (null? funcs)
            x
            ((compose-all (cdr funcs)) ((car funcs) x))
        )
    )
)